{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs\";\nexport class AbstractHttpService {\n  //protected sessionStorage: Ng2Storage = new Ng2Storage(sessionStorage);\n  //protected cookieStorage: CookieStorage = new CookieStorage();\n  constructor(baseUrl, http, initialPath) {\n    this.http = http;\n    this.initialPath = initialPath;\n    this.APPLICATION_JSON = 'application/json';\n    this.dateTimeReviver = function (key, value) {\n      var a;\n      if (typeof value === 'string') {\n        a = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})Z/.exec(value);\n        if (a) {\n          return new Date(a[0]);\n        }\n      }\n      return value;\n    };\n    this.apiUrl = baseUrl;\n  }\n  /**\r\n   *\r\n   *\r\n   * @protected\r\n   * @param {Parametter} param\r\n   * @param {string} [responseType=this.APPLICATION_JSON_UTF_8]\r\n   * @returns {Observable<T>}\r\n   * @memberof AbstractHttpService\r\n   */\n  findBy(param, responseType = this.APPLICATION_JSON) {\n    const paramStr = param instanceof Array ? param.join('/') : param;\n    return this.http.get(`${this.buildUrl()}/${paramStr}`, this.createOptions(null, null, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  /**\r\n   * Utilizar método buscarComQueryParam, quando não tiver certeza que todos os parametros do serviço serão informados e\r\n   * queira que os mesmos sejão capturados como null no backend.\r\n   * OBS.: No QueryParam utilizar nomeação por posição, ou seja, 0 para o primeiro e assim em diante.\r\n   * @param path\r\n   * @param pathParam\r\n   */\n  findWithQueryParam(path, ...pathParam) {\n    const parametros = {};\n    if (!(pathParam === null || pathParam === undefined)) {\n      let c = 0;\n      pathParam.forEach(param => {\n        const label = c.toString();\n        parametros[label] = param;\n        c++;\n      });\n    }\n    return this.http.get(`${this.buildUrl(path)}`, this.createOptions(parametros)).pipe(map(next => this.handleResult(next)));\n  }\n  get(path, params, responseType = this.APPLICATION_JSON) {\n    return this.http.get(`${this.buildUrl(path)}`, this.createOptions(params, null, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  post(path, body, params, responseType = this.APPLICATION_JSON) {\n    return this.http.post(`${this.buildUrl(path)}`, body, this.createOptions(params, body, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  send(path, body) {\n    return this.http.post(`${this.buildUrl(path)}`, body).pipe(map(next => this.handleResult(next)));\n  }\n  put(path, body, params, responseType = this.APPLICATION_JSON) {\n    return this.http.put(`${this.buildUrl(path)}`, body, this.createOptions(params, body, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  delete(path, body, params, responseType = this.APPLICATION_JSON) {\n    return this.http.delete(`${this.buildUrl(path)}`, this.createOptions(params, body, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  head(path, body, params, responseType = this.APPLICATION_JSON) {\n    return this.http.head(`${this.buildUrl(path)}`, this.createOptions(params, body, responseType)).pipe(map(next => this.handleResult(next)));\n  }\n  postLogout() {\n    return this.http.post(`${this.buildUrl().replace('/api', '')}`, null, this.createOptions()).pipe(map(next => this.handleResult(next)));\n  }\n  handleResult(result) {\n    let res = {};\n    if (this.isJsonString(result)) {\n      const dataRaw = JSON.parse(result, this.dateTimeReviver);\n      if (dataRaw instanceof Array) {\n        res = dataRaw.map(x => x);\n      } else {\n        res = JSON.parse(result, this.dateTimeReviver);\n      }\n    } else if (!(result === null || result === undefined)) {\n      res = result;\n      //if (typeof result === 'string') {\n      //  const resultFormatted = ['true', 'false'].any(x => x === result.toLocaleLowerCase()) ?\n      //    Boolean(JSON.parse(result)) : result;\n      //  res = resultFormatted;\n      //} else if (typeof result === 'object') {\n      //  res = result;\n      //} else if (result instanceof Blob || typeof result === 'number' || typeof result === 'boolean') {\n      //  res = result;\n      //}\n    }\n\n    return res;\n  }\n  createOptions(parametters = null, body = null, responseType = this.APPLICATION_JSON) {\n    if (parametters) {\n      let httpParams = new HttpParams();\n      httpParams = this.buildParametters(parametters, httpParams);\n      return {\n        headers: this.buildHeaders(responseType),\n        params: httpParams,\n        body: body,\n        responseType: responseType,\n        reportProgress: false,\n        withCredentials: true\n      };\n    } else {\n      return {\n        headers: this.buildHeaders(responseType),\n        body: body,\n        responseType: responseType,\n        withCredentials: true\n      };\n    }\n  }\n  buildParametters(arg, httpParams) {\n    const entries = Object.entries(arg);\n    entries.forEach(x => {\n      if (!(x[1] === null || x[1] === undefined)) {\n        if (typeof x[1] === 'object') {\n          httpParams = this.buildParametters(x[1], httpParams);\n        } else {\n          httpParams = httpParams.set(x[0], x[1]);\n        }\n      }\n    });\n    return httpParams;\n  }\n  buildHeaders(accept = this.APPLICATION_JSON) {\n    let auth = this.buildAuthorization();\n    if (auth) {\n      return new HttpHeaders({\n        'Content-Type': this.APPLICATION_JSON,\n        'accept': accept,\n        'Authorization': auth\n      });\n    } else {\n      return new HttpHeaders({\n        'Content-Type': this.APPLICATION_JSON,\n        'accept': accept\n      });\n    }\n  }\n  buildAuthorization() {\n    const token = localStorage.getItem('TOKEN');\n    return token ? `Bearer ${token}` : '';\n  }\n  buildUrl(path = '') {\n    const initPath = this.initialPath ?? this.initialPath;\n    path = !path ? '' : `/${path}`;\n    return `${this.apiUrl}${initPath}${path}`;\n  }\n  isJsonString(resposta) {\n    try {\n      const formattedResponse = JSON.parse(resposta);\n      if (formattedResponse && typeof formattedResponse === 'object') {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  }\n}\nexport var ResponseType;\n(function (ResponseType) {\n  ResponseType[\"TEXT\"] = \"text/plain\";\n  ResponseType[\"JSON\"] = \"application/json\";\n  ResponseType[\"BLOB\"] = \"application/octet-stream\";\n  ResponseType[\"ARRAYBUFFER\"] = \"arraybuffer\";\n  ResponseType[\"DOCUMENT\"] = \"document\";\n  ResponseType[\"MS_STREAM\"] = \"ms-stream\";\n})(ResponseType || (ResponseType = {}));","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","map","AbstractHttpService","constructor","baseUrl","http","initialPath","key","value","a","exec","Date","apiUrl","findBy","param","responseType","APPLICATION_JSON","paramStr","Array","join","get","buildUrl","createOptions","pipe","next","handleResult","findWithQueryParam","path","pathParam","parametros","undefined","c","forEach","label","toString","params","post","body","send","put","delete","head","postLogout","replace","result","res","isJsonString","dataRaw","JSON","parse","dateTimeReviver","x","parametters","httpParams","buildParametters","headers","buildHeaders","reportProgress","withCredentials","arg","entries","Object","set","accept","auth","buildAuthorization","token","localStorage","getItem","initPath","resposta","formattedResponse","e","ResponseType"],"sourceRoot":"","sources":["C:\\projetos\\fisica\\Fisica\\src\\Fisica.Website\\ClientApp\\src\\app\\shared\\services\\abstract-http.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { map, Observable } from \"rxjs\";\r\n\r\ntype Parametter = string | number | boolean | Array<string | number | boolean>;\r\n\r\nexport abstract class AbstractHttpService {\r\n\r\n  private readonly APPLICATION_JSON = 'application/json';\r\n  private apiUrl: string;\r\n  //protected sessionStorage: Ng2Storage = new Ng2Storage(sessionStorage);\r\n  //protected cookieStorage: CookieStorage = new CookieStorage();\r\n\r\n  constructor(baseUrl: string, private http: HttpClient, private initialPath?: string) {\r\n    this.apiUrl = baseUrl;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @protected\r\n   * @param {Parametter} param\r\n   * @param {string} [responseType=this.APPLICATION_JSON_UTF_8]\r\n   * @returns {Observable<T>}\r\n   * @memberof AbstractHttpService\r\n   */\r\n  protected findBy<T>(param: Parametter, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    const paramStr = param instanceof Array ? param.join('/') : param;\r\n    return this.http.get(`${this.buildUrl()}/${paramStr}`, this.createOptions(null, null, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Utilizar método buscarComQueryParam, quando não tiver certeza que todos os parametros do serviço serão informados e\r\n   * queira que os mesmos sejão capturados como null no backend.\r\n   * OBS.: No QueryParam utilizar nomeação por posição, ou seja, 0 para o primeiro e assim em diante.\r\n   * @param path\r\n   * @param pathParam\r\n   */\r\n  protected findWithQueryParam<T>(path: string, ...pathParam: Array<any>): Observable<T> {\r\n    const parametros: { [index: string]: any } = {};\r\n\r\n    if (!(pathParam === null || pathParam === undefined)) {\r\n      let c: number = 0;\r\n      pathParam.forEach(param => {\r\n        const label: string = c.toString();\r\n        parametros[label] = param;\r\n        c++;\r\n      });\r\n    }\r\n\r\n    return this.http.get(`${this.buildUrl(path)}`, this.createOptions(parametros))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected get<T>(path?: string, params?: Object, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    return this.http.get(`${this.buildUrl(path)}`, this.createOptions(params, null, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected post<T>(path?: string, body?: any, params?: Object, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    return this.http.post(`${this.buildUrl(path)}`, body, this.createOptions(params, body, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected send<T>(path?: string, body?: any): Observable<T> {\r\n    return this.http.post(`${this.buildUrl(path)}`, body)\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected put<T>(path?: string, body?: any, params?: Object, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    return this.http.put(`${this.buildUrl(path)}`, body, this.createOptions(params, body, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected delete<T>(path?: string, body?: any, params?: Object, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    return this.http.delete(`${this.buildUrl(path)}`, this.createOptions(params, body, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected head<T>(path?: string, body?: any, params?: Object, responseType: string = this.APPLICATION_JSON): Observable<T> {\r\n    return this.http.head(`${this.buildUrl(path)}`, this.createOptions(params, body, responseType))\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  protected postLogout<T>(): Observable<T> {\r\n    return this.http.post(`${this.buildUrl().replace('/api', '')}`, null, this.createOptions())\r\n      .pipe(\r\n        map((next) => this.handleResult<T>(next))\r\n      );\r\n  }\r\n\r\n  dateTimeReviver = function (key: string, value: any) {\r\n    var a;\r\n    if (typeof value === 'string') {\r\n      a = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})Z/.exec(value);\r\n      if (a) {\r\n        return new Date(a[0]);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private handleResult<T>(result: any): T {\r\n    let res: any = {};\r\n    if (this.isJsonString(result)) {\r\n      const dataRaw = JSON.parse(result, this.dateTimeReviver);\r\n      if (dataRaw instanceof Array) {\r\n        res = dataRaw.map(x => x as T);\r\n      } else {\r\n        res = JSON.parse(result, this.dateTimeReviver) as T;\r\n      }\r\n    } else if (!(result === null || result === undefined)) {\r\n      res = result;\r\n      //if (typeof result === 'string') {\r\n      //  const resultFormatted = ['true', 'false'].any(x => x === result.toLocaleLowerCase()) ?\r\n      //    Boolean(JSON.parse(result)) : result;\r\n      //  res = resultFormatted;\r\n      //} else if (typeof result === 'object') {\r\n      //  res = result;\r\n      //} else if (result instanceof Blob || typeof result === 'number' || typeof result === 'boolean') {\r\n      //  res = result;\r\n      //}\r\n    }\r\n    return res;\r\n  }\r\n\r\n  protected createOptions(parametters: any = null, body: any = null, responseType: string = this.APPLICATION_JSON): any {\r\n    if (parametters) {\r\n      let httpParams = new HttpParams();\r\n      httpParams = this.buildParametters(parametters, httpParams);\r\n      return {\r\n        headers: this.buildHeaders(responseType),\r\n        params: httpParams,\r\n        body: body,\r\n        responseType: responseType,\r\n        reportProgress: false,\r\n        withCredentials: true\r\n      };\r\n    } else {\r\n      return {\r\n        headers: this.buildHeaders(responseType),\r\n        body: body,\r\n        responseType: responseType,\r\n        withCredentials: true\r\n      };\r\n    }\r\n  }\r\n\r\n  private buildParametters(arg: Object, httpParams: HttpParams): HttpParams {\r\n    const entries = Object.entries(arg);\r\n    entries.forEach(x => {\r\n      if (!(x[1] === null || x[1] === undefined)) {\r\n        if (typeof x[1] === 'object') {\r\n          httpParams = this.buildParametters(x[1] as Object, httpParams);\r\n        } else {\r\n          httpParams = httpParams.set(x[0], x[1]);\r\n        }\r\n      }\r\n    });\r\n    return httpParams;\r\n  }\r\n\r\n  private buildHeaders(accept: string = this.APPLICATION_JSON): HttpHeaders {\r\n    let auth = this.buildAuthorization();\r\n    if (auth) {\r\n      return new HttpHeaders({\r\n        'Content-Type': this.APPLICATION_JSON,\r\n        'accept': accept,\r\n        'Authorization': auth\r\n      });\r\n    } else {\r\n      return new HttpHeaders({\r\n        'Content-Type': this.APPLICATION_JSON,\r\n        'accept': accept\r\n      });\r\n    }\r\n  }\r\n\r\n  private buildAuthorization(): string {\r\n    const token = localStorage.getItem('TOKEN');\r\n    return token ? `Bearer ${token}` : '';\r\n  }\r\n\r\n  private buildUrl(path: string = ''): string {\r\n    const initPath = this.initialPath ?? this.initialPath;\r\n    path = !path ? '' : `/${path}`;\r\n    return `${this.apiUrl}${initPath}${path}`;\r\n  }\r\n\r\n  private isJsonString(resposta: any): boolean {\r\n    try {\r\n      const formattedResponse = JSON.parse(resposta);\r\n      if (formattedResponse && typeof formattedResponse === 'object') {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport enum ResponseType {\r\n  TEXT = 'text/plain',\r\n  JSON = 'application/json',\r\n  BLOB = 'application/octet-stream',\r\n  ARRAYBUFFER = 'arraybuffer',\r\n  DOCUMENT = 'document',\r\n  MS_STREAM = 'ms-stream'\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}